import { NextRequest, NextResponse } from "next/server";
import { mockPredictions } from "@/lib/data";

// 内存存储（用于演示）
let predictions = [...mockPredictions];

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const category = searchParams.get("category");
    const status = searchParams.get("status");
    const limit = searchParams.get("limit");

    let filteredPredictions = predictions;

    // 按分类筛选
    if (category) {
      filteredPredictions = filteredPredictions.filter(
        (prediction) => prediction.category === category
      );
    }

    // 按状态筛选
    if (status) {
      filteredPredictions = filteredPredictions.filter(
        (prediction) => prediction.status === status
      );
    }

    // 分页处理
    if (limit) {
      const limitNum = parseInt(limit);
      filteredPredictions = filteredPredictions.slice(0, limitNum);
    }

    return NextResponse.json({
      success: true,
      data: filteredPredictions,
      message: "获取预测事件列表成功",
    });
  } catch (error) {
    console.error("获取预测事件列表失败:", error);
    return NextResponse.json(
      {
        success: false,
        message: "获取预测事件列表失败",
      },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();

    // 验证必填字段
    const requiredFields = ["title", "description", "category", "deadline", "minStake", "criteria"];
    const missingFields = requiredFields.filter((field) => !body[field]);

    if (missingFields.length > 0) {
      return NextResponse.json(
        {
          success: false,
          message: `缺少必填字段: ${missingFields.join(", ")}`,
        },
        { status: 400 }
      );
    }

    // 验证数据类型
    if (typeof body.title !== "string" || body.title.trim().length === 0) {
      return NextResponse.json(
        {
          success: false,
          message: "标题必须是有效的字符串",
        },
        { status: 400 }
      );
    }

    if (typeof body.minStake !== "number" || body.minStake <= 0) {
      return NextResponse.json(
        {
          success: false,
          message: "最小押注必须是大于0的数字",
        },
        { status: 400 }
      );
    }

    // 创建新的预测事件
    const newPrediction = {
      id: Date.now(),
      title: body.title.trim(),
      description: body.description.trim(),
      category: body.category,
      deadline: body.deadline,
      minStake: body.minStake,
      criteria: body.criteria.trim(),
      referenceUrl: body.referenceUrl || "",
      status: "active" as const,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };

    predictions.push(newPrediction);

    return NextResponse.json(
      {
        success: true,
        data: newPrediction,
        message: "预测事件创建成功",
      },
      { status: 201 }
    );
  } catch (error) {
    console.error("创建预测事件失败:", error);
    return NextResponse.json(
      {
        success: false,
        message: "创建预测事件失败",
      },
      { status: 500 }
    );
  }
}