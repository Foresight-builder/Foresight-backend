const { createClient } = require('@supabase/supabase-js');

const client = createClient(
  'https://qhllkgbddesrbhvjzfud.supabase.co', 
  'sb_secret_VnrRa68cNTWbwvmkYQjXJw_lM5LI68r'
);

async function fixTable() {
  try {
    console.log('尝试直接删除并重新创建event_follows表...');
    
    // 使用原生SQL查询
    const dropSQL = 'DROP TABLE IF EXISTS public.event_follows CASCADE;';
    const createSQL = `
      CREATE TABLE public.event_follows (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        user_id TEXT NOT NULL,
        event_id BIGINT NOT NULL,
        created_at TIMESTAMPTZ DEFAULT NOW(),
        UNIQUE (user_id, event_id)
      );
      
      -- 添加外键约束（如果predictions表存在）
      ALTER TABLE public.event_follows 
      ADD CONSTRAINT fk_event_follows_prediction 
      FOREIGN KEY (event_id) REFERENCES public.predictions(id) ON DELETE CASCADE;
    `;
    
    // 尝试使用不同的方法执行SQL
    try {
      // 方法1: 使用rpc调用
      const { error: dropError } = await client.rpc('sql', { query: dropSQL });
      if (dropError) {
        console.log('方法1删除失败:', dropError.message);
      } else {
        console.log('方法1删除成功');
      }
      
      const { error: createError } = await client.rpc('sql', { query: createSQL });
      if (createError) {
        console.log('方法1创建失败:', createError.message);
      } else {
        console.log('方法1创建成功');
      }
    } catch (err) {
      console.log('方法1失败:', err.message);
      
      // 方法2: 尝试使用from().select()来触发表创建
      console.log('尝试方法2...');
      try {
        // 先尝试插入一条记录来触发表的自动创建
        const { error: insertError } = await client
          .from('event_follows')
          .insert({ user_id: 'test', event_id: 1 });
        
        if (insertError) {
          console.log('插入测试记录失败:', insertError.message);
        } else {
          console.log('插入测试记录成功');
          
          // 删除测试记录
          await client
            .from('event_follows')
            .delete()
            .eq('user_id', 'test');
        }
      } catch (err2) {
        console.log('方法2也失败:', err2.message);
      }
    }
    
    // 验证表结构
    console.log('验证表结构...');
    const { data, error } = await client
      .from('event_follows')
      .select('user_id')
      .limit(1);
    
    if (error) {
      console.log('验证失败:', error.message);
      console.log('表可能仍然不存在或结构不正确');
    } else {
      console.log('验证成功！表结构正确');
    }
    
  } catch (err) {
    console.error('操作失败:', err.message);
  }
}

fixTable();