const { createClient } = require('@supabase/supabase-js');

// 使用service key创建admin客户端
const supabaseAdmin = createClient(
  'https://qhllkgbddesrbhvjzfud.supabase.co', 
  'sb_secret_VnrRa68cNTWbwvmkYQjXJw_lM5LI68r',
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

async function createTableManually() {
  try {
    console.log('手动创建event_follows表...');
    
    // 使用原生SQL查询 - 尝试不同的方法
    const createSQL = `
      DROP TABLE IF EXISTS public.event_follows CASCADE;
      
      CREATE TABLE public.event_follows (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        user_id TEXT NOT NULL,
        event_id BIGINT NOT NULL REFERENCES public.predictions(id) ON DELETE CASCADE,
        created_at TIMESTAMPTZ DEFAULT NOW(),
        UNIQUE (user_id, event_id)
      );
    `;
    
    // 方法1: 尝试使用rpc
    console.log('尝试使用rpc方法...');
    try {
      const { data, error } = await supabaseAdmin.rpc('exec_sql', { sql: createSQL });
      if (error) {
        console.log('rpc exec_sql失败:', error.message);
      } else {
        console.log('rpc exec_sql成功:', data);
      }
    } catch (err) {
      console.log('rpc方法失败:', err.message);
    }
    
    // 方法2: 尝试分步执行
    console.log('尝试分步执行...');
    try {
      // 先删除表
      const { error: dropError } = await supabaseAdmin.rpc('exec_sql', { 
        sql: 'DROP TABLE IF EXISTS public.event_follows CASCADE;' 
      });
      
      if (dropError) {
        console.log('删除表失败:', dropError.message);
      } else {
        console.log('删除表成功');
      }
      
      // 再创建表
      const { error: createError } = await supabaseAdmin.rpc('exec_sql', { 
        sql: `CREATE TABLE public.event_follows (
          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          user_id TEXT NOT NULL,
          event_id BIGINT NOT NULL REFERENCES public.predictions(id) ON DELETE CASCADE,
          created_at TIMESTAMPTZ DEFAULT NOW(),
          UNIQUE (user_id, event_id)
        );` 
      });
      
      if (createError) {
        console.log('创建表失败:', createError.message);
      } else {
        console.log('创建表成功');
      }
      
    } catch (err) {
      console.log('分步执行失败:', err.message);
    }
    
    // 验证表结构
    console.log('验证表结构...');
    const { data, error } = await supabaseAdmin
      .from('event_follows')
      .select('user_id')
      .limit(1);
    
    if (error) {
      console.log('验证失败:', error.message);
    } else {
      console.log('验证成功！表结构正确');
    }
    
  } catch (err) {
    console.error('操作失败:', err.message);
  }
}

createTableManually();