const { createClient } = require('@supabase/supabase-js');

const client = createClient(
  'https://qhllkgbddesrbhvjzfud.supabase.co', 
  'sb_secret_VnrRa68cNTWbwvmkYQjXJw_lM5LI68r'
);

async function createTable() {
  try {
    console.log('删除现有的event_follows表...');
    
    // 先删除现有表
    const dropSQL = 'DROP TABLE IF EXISTS public.event_follows;';
    
    // 使用原生查询删除表
    const { error: dropError } = await client.rpc('exec', {
      sql: dropSQL
    });
    
    if (dropError) {
      console.log('删除表失败，尝试其他方法:', dropError.message);
    } else {
      console.log('成功删除现有表');
    }
    
    console.log('创建新的event_follows表...');
    
    // 创建新表
    const createSQL = `
      CREATE TABLE IF NOT EXISTS public.event_follows (
           id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
           user_id TEXT NOT NULL,
           event_id BIGINT NOT NULL REFERENCES public.predictions(id) ON DELETE CASCADE,
           created_at TIMESTAMPTZ DEFAULT NOW(),
           UNIQUE (user_id, event_id)
         );
    `;
    
    const { error: createError } = await client.rpc('exec', {
      sql: createSQL
    });
    
    if (createError) {
      console.log('创建表失败:', createError.message);
    } else {
      console.log('成功创建event_follows表');
    }
    
    // 验证表结构
    const { data, error } = await client
      .from('event_follows')
      .select('user_id')
      .limit(1);
    
    if (error) {
      console.log('验证失败:', error.message);
    } else {
      console.log('表结构验证成功');
    }
    
  } catch (err) {
    console.error('操作失败:', err.message);
  }
}

createTable();